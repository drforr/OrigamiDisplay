#!/usr/bin/perl -w
#
# This is the (re)generated UI construction class.
#
# DO NOT EDIT THIS FILE, ANY CHANGES THAT YOU MAKE WILL BE LOST WHEN
# THIS FILE WILL BE OVERWRITTEN BY THE NEXT RUN OF Glade::PerlGenerate
#
#==============================================================================
#=== This is the 'app1' class                              
#==============================================================================
package app1;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'app1' (version 0.01)
# 
# Copyright (c) Date Tue Sep 24 22:49:12 EDT 2002
# Author Jeff <jgoff@localhost.localdomain>
#
# Unspecified copying policy, please contact the author
# Jeff <jgoff@localhost.localdomain>
#
#==============================================================================
# This perl source file was automatically generated by 
# Glade::PerlGenerate version 0.60 - Fri May  3 03:56:25 BST 2002
# Copyright (c) Author Dermot Musgrove <dermot.musgrove@virgin.net>
#
# from Glade file /home/jgoff/Projects/NetDisplay/netdisplay.glade
# Sat Oct  5 16:06:16 EDT 2002
#==============================================================================

BEGIN {
    # Run-time utilities and vars
    use Glade::PerlRun; 
    # Existing signal handler modules
    # We need the Gnome bindings as well
    use Gnome;
    use vars qw( 
                 @ISA
                 %fields
                 %stubs
                 $PACKAGE
                 $VERSION
                 $AUTHOR
                 $DATE
                 $AUTOLOAD
                 $permitted_fields
             );
    # Tell interpreter who we are inheriting from
    @ISA     = qw( Glade::PerlRun );
    $PACKAGE = 'NetDisplay';
    $VERSION = '0.01';
    $AUTHOR  = 'Jeff <jgoff@localhost.localdomain>';
    $DATE    = 'Tue Sep 24 22:49:12 EDT 2002';
    $permitted_fields = '_permitted_fields';             
} # End of sub BEGIN

    $Glade::PerlRun::pixmaps_directory ||= '/home/jgoff/Projects/NetDisplay/pixmaps';

%fields = (
    # These are the data fields that you can set/get using the dynamic
    # calls provided by AUTOLOAD (and their initial values).
    # eg $class->FORM($new_value);      sets the value of FORM
    #    $current_value = $class->FORM; gets the current value of FORM
    TOPLEVEL => undef,
    FORM     => undef,
    PACKAGE  => 'NetDisplay',
    VERSION  => '0.01',
    AUTHOR   => 'Jeff <jgoff@localhost.localdomain>',
    DATE     => 'Tue Sep 24 22:49:12 EDT 2002',
    INSTANCE => 'app1',
    CLASS_HIERARCHY => undef,
    WIDGET_HIERARCHY => undef,
);

%stubs = (
    # These are signal handlers that will cause a message_box to be
    # displayed by AUTOLOAD if there is not already a sub of that name
    # in any module specified in 'use_modules'.

    'on_about1_activate' => undef,
    'on_clear1_activate' => undef,
    'on_copy1_activate' => undef,
    'on_cut1_activate' => undef,
    'on_exit1_activate' => undef,
    'on_new_file1_activate' => undef,
    'on_open1_activate' => undef,
    'on_paste1_activate' => undef,
    'on_preferences1_activate' => undef,
    'on_properties1_activate' => undef,
    'on_save1_activate' => undef,
    'on_save_as1_activate' => undef,
);

sub AUTOLOAD {
    my $self = shift;
    my $type = ref($self)
        or die "$self is not an object so we cannot '$AUTOLOAD'\n",
            "We were called from ".join(", ", caller)."\n\n";
    my $name = $AUTOLOAD;
    $name =~ s/.*://;       # strip fully-qualified portion

    if (exists $self->{$permitted_fields}{$name} ) {
        # This allows dynamic data methods - see hash fields above
        # eg $class->UI('new_value');
        # or $current_value = $class->UI;
        if (@_) {
            return $self->{$name} = shift;
        } else {
            return $self->{$name};
        }

    } elsif (exists $stubs{$name} ) {
        # This shows dynamic signal handler stub message_box - see hash stubs above
        __PACKAGE__->show_skeleton_message(
            $AUTOLOAD."\n ("._("AUTOLOADED by")." ".__PACKAGE__.")", 
            [$self, @_], 
            __PACKAGE__, 
            'Logo.xpm');
        
    } else {
        die "Can't access method `$name' in class $type\n".
            "We were called from ".join(", ", caller)."\n\n";

    }
} # End of sub AUTOLOAD

sub run {
    my ($class) = @_;
    $class->load_translations('NetDisplay');
    # You can use the line below to load a test .mo file before it is installed in 
    # the normal place (eg /usr/local/share/locale/en_US/LC_MESSAGES/NetDisplay.mo)
#    $class->load_translations('NetDisplay', 'test', undef, '/home/jgoff/Projects/NetDisplay/ppo/NetDisplay.mo');
    Gnome->init('NetDisplay', '0.01');
    my $window = $class->new;
    $window->TOPLEVEL->show;
    Gtk->main;
} # End of sub run

sub DESTROY {
    # This sub will be called on object destruction
} # End of sub DESTROY

sub new {
#
# This sub will create the UI window
    my $that  = shift;
    my $class = ref($that) || $that;
    my $self  = {
        $permitted_fields   => \%fields, %fields,
        _permitted_stubs    => \%stubs,  %stubs,
    };
    my ($forms, $widgets, $data, $work);
    my $instance = 1;
    # Get a unique toplevel widget structure
    while (defined $__PACKAGE__::all_forms->{"app1-$instance"}) {$instance++;}


    #
    # Construct a GnomeApp 'app1'
    $widgets->{'app1'} = new Gnome::App('NetDisplay', _('NetDisplay'));
    $widgets->{'app1'}->enable_layout_config(1 );
    $widgets->{'app1'}->position('none' );
    $widgets->{'app1'}->set_policy(0, 1, 0 );
    $widgets->{'app1'}->set_modal(0 );
    $widgets->{'app1'}->realize;
    $forms->{'app1'}{'tooltips'} = new Gtk::Tooltips;
    $forms->{'app1'}{'accelgroup'} = new Gtk::AccelGroup;
    $forms->{'app1'}{'accelgroup'}->attach($widgets->{'app1'} );
    $forms->{'app1'}{'app1'} = $widgets->{'app1'};
	#
	# Construct a GnomeDock 'dock1'
	$widgets->{'dock1'} = $forms->{'app1'}{'app1'}->get_dock;
	$widgets->{'dock1'}->allow_floating_items(1 );
	$widgets->{'dock1'}->show;
	$forms->{'app1'}{'dock1'} = $widgets->{'dock1'};
	    #
	    # Construct a GnomeDockItem 'dockitem1'
	    $widgets->{'dockitem1'} = new Gnome::DockItem('dockitem1', ['exclusive', 'never_vertical', 'locked'] );
	    $widgets->{'dockitem1'}->set_shadow_type('out' );
	    $forms->{'app1'}{'dock1'}->add_item($widgets->{'dockitem1'}, 'top', 0, 0, 0, 0 );
	    $widgets->{'dockitem1'}->show;
	    $forms->{'app1'}{'dockitem1'} = $widgets->{'dockitem1'};
	    $forms->{'app1'}{'dockitem1'}->border_width(2 );
		#
		# Construct a GtkMenuBar 'menubar1'
		$widgets->{'menubar1'} = new Gtk::MenuBar;
		$widgets->{'menubar1'}->set_shadow_type('none' );
		$forms->{'app1'}{'dockitem1'}->add($widgets->{'menubar1'} );
		$widgets->{'menubar1'}->show;
		$forms->{'app1'}{'menubar1'} = $widgets->{'menubar1'};
		    #
		    # Construct a GtkMenuItem 'file1'
		    $widgets->{'file1'} = new Gtk::MenuItem(_('_File'));
		    $forms->{'app1'}{'menubar1'}->append($widgets->{'file1'} );
		    $widgets->{'file1'}->show;
		    $forms->{'app1'}{'file1'} = $widgets->{'file1'};
		    $forms->{'app1'}{'file1-key'} = $forms->{'app1'}{'file1'}->child->parse_uline(_('_File') );
		    $forms->{'app1'}{'file1'}->add_accelerator('activate_item', $forms->{'app1'}{'accelgroup'}, $forms->{'app1'}{'file1-key'}, 'mod1_mask', ['visible', 'locked'] );
			#
			# Construct a GtkMenu 'file1_menu'
			$widgets->{'file1_menu'} = new Gtk::Menu;
			$forms->{'app1'}{'file1'}->set_submenu($widgets->{'file1_menu'} );
			$forms->{'app1'}{'file1_menu'} = $widgets->{'file1_menu'};
			    #
			    # Construct a GtkPixmapMenuItem 'new_file1'
			    $widgets->{'new_file1'} = Gnome::Stock->menu_item('Menu_New', _('_New File'));
			    $widgets->{'new_file1-key'} = ($widgets->{'new_file1'}->child->children)[1]->widget->parse_uline(_('_New File') );
			    $widgets->{'new_file1'}->add_accelerator('activate_item', $forms->{'app1'}{'accelgroup'}, $widgets->{'new_file1-key'}, 'mod1_mask', ['visible', 'locked'] );
			    $forms->{'app1'}{'file1_menu'}->append($widgets->{'new_file1'} );
			    $widgets->{'new_file1'}->show;
			    $forms->{'app1'}{'new_file1'} = $widgets->{'new_file1'};
			    #
			    # Construct a GtkPixmapMenuItem 'open1'
			    $widgets->{'open1'} = Gnome::Stock->menu_item('Menu_Open', _('Open'));
			    $forms->{'app1'}{accelgroup}->add($Gtk::Keysyms{'F3'} || Gtk::Gdk->keyval_from_name('F3') || 65472, ['0'], ['visible', 'locked'], $widgets->{'open1'}, 'activate');
			    $forms->{'app1'}{'file1_menu'}->append($widgets->{'open1'} );
			    $widgets->{'open1'}->show;
			    $forms->{'app1'}{'open1'} = $widgets->{'open1'};
			    #
			    # Construct a GtkPixmapMenuItem 'save1'
			    $widgets->{'save1'} = Gnome::Stock->menu_item('Menu_Save', _('Save'));
			    $forms->{'app1'}{accelgroup}->add($Gtk::Keysyms{'S'} || Gtk::Gdk->keyval_from_name('S') || 83, ['control_mask'], ['visible', 'locked'], $widgets->{'save1'}, 'activate');
			    $forms->{'app1'}{'file1_menu'}->append($widgets->{'save1'} );
			    $widgets->{'save1'}->show;
			    $forms->{'app1'}{'save1'} = $widgets->{'save1'};
			    #
			    # Construct a GtkPixmapMenuItem 'save_as1'
			    $widgets->{'save_as1'} = Gnome::Stock->menu_item('Menu_Save As', _('Save _As...'));
			    $widgets->{'save_as1-key'} = ($widgets->{'save_as1'}->child->children)[1]->widget->parse_uline(_('Save _As...') );
			    $widgets->{'save_as1'}->add_accelerator('activate_item', $forms->{'app1'}{'accelgroup'}, $widgets->{'save_as1-key'}, 'mod1_mask', ['visible', 'locked'] );
			    $forms->{'app1'}{'file1_menu'}->append($widgets->{'save_as1'} );
			    $widgets->{'save_as1'}->show;
			    $forms->{'app1'}{'save_as1'} = $widgets->{'save_as1'};
			    #
			    # Construct a GtkMenuItem 'separator1'
			    $widgets->{'separator1'} = new Gtk::MenuItem;
			    $forms->{'app1'}{'file1_menu'}->append($widgets->{'separator1'} );
			    $widgets->{'separator1'}->show;
			    $forms->{'app1'}{'separator1'} = $widgets->{'separator1'};
			    #
			    # Construct a GtkPixmapMenuItem 'exit1'
			    $widgets->{'exit1'} = Gnome::Stock->menu_item('Menu_Quit', _('Exit'));
			    $forms->{'app1'}{accelgroup}->add($Gtk::Keysyms{'Q'} || Gtk::Gdk->keyval_from_name('Q') || 81, ['control_mask'], ['visible', 'locked'], $widgets->{'exit1'}, 'activate');
			    $forms->{'app1'}{'file1_menu'}->append($widgets->{'exit1'} );
			    $widgets->{'exit1'}->show;
			    $forms->{'app1'}{'exit1'} = $widgets->{'exit1'};
		    #
		    # Construct a GtkMenuItem 'edit1'
		    $widgets->{'edit1'} = new Gtk::MenuItem(_('_Edit'));
		    $forms->{'app1'}{'menubar1'}->append($widgets->{'edit1'} );
		    $widgets->{'edit1'}->show;
		    $forms->{'app1'}{'edit1'} = $widgets->{'edit1'};
		    $forms->{'app1'}{'edit1-key'} = $forms->{'app1'}{'edit1'}->child->parse_uline(_('_Edit') );
		    $forms->{'app1'}{'edit1'}->add_accelerator('activate_item', $forms->{'app1'}{'accelgroup'}, $forms->{'app1'}{'edit1-key'}, 'mod1_mask', ['visible', 'locked'] );
			#
			# Construct a GtkMenu 'edit1_menu'
			$widgets->{'edit1_menu'} = new Gtk::Menu;
			$forms->{'app1'}{'edit1'}->set_submenu($widgets->{'edit1_menu'} );
			$forms->{'app1'}{'edit1_menu'} = $widgets->{'edit1_menu'};
			    #
			    # Construct a GtkPixmapMenuItem 'cut1'
			    $widgets->{'cut1'} = Gnome::Stock->menu_item('Menu_Cut', _('Cut'));
			    $forms->{'app1'}{accelgroup}->add($Gtk::Keysyms{'X'} || Gtk::Gdk->keyval_from_name('X') || 88, ['control_mask'], ['visible', 'locked'], $widgets->{'cut1'}, 'activate');
			    $forms->{'app1'}{'edit1_menu'}->append($widgets->{'cut1'} );
			    $widgets->{'cut1'}->show;
			    $forms->{'app1'}{'cut1'} = $widgets->{'cut1'};
			    #
			    # Construct a GtkPixmapMenuItem 'copy1'
			    $widgets->{'copy1'} = Gnome::Stock->menu_item('Menu_Copy', _('Copy'));
			    $forms->{'app1'}{accelgroup}->add($Gtk::Keysyms{'C'} || Gtk::Gdk->keyval_from_name('C') || 67, ['control_mask'], ['visible', 'locked'], $widgets->{'copy1'}, 'activate');
			    $forms->{'app1'}{'edit1_menu'}->append($widgets->{'copy1'} );
			    $widgets->{'copy1'}->show;
			    $forms->{'app1'}{'copy1'} = $widgets->{'copy1'};
			    #
			    # Construct a GtkPixmapMenuItem 'paste1'
			    $widgets->{'paste1'} = Gnome::Stock->menu_item('Menu_Paste', _('Paste'));
			    $forms->{'app1'}{accelgroup}->add($Gtk::Keysyms{'V'} || Gtk::Gdk->keyval_from_name('V') || 86, ['control_mask'], ['visible', 'locked'], $widgets->{'paste1'}, 'activate');
			    $forms->{'app1'}{'edit1_menu'}->append($widgets->{'paste1'} );
			    $widgets->{'paste1'}->show;
			    $forms->{'app1'}{'paste1'} = $widgets->{'paste1'};
			    #
			    # Construct a GtkPixmapMenuItem 'clear1'
			    $widgets->{'clear1'} = Gnome::Stock->menu_item('Clear', _('Clear'));
			    $forms->{'app1'}{'edit1_menu'}->append($widgets->{'clear1'} );
			    $widgets->{'clear1'}->show;
			    $forms->{'app1'}{'clear1'} = $widgets->{'clear1'};
			    #
			    # Construct a GtkMenuItem 'separator2'
			    $widgets->{'separator2'} = new Gtk::MenuItem;
			    $forms->{'app1'}{'edit1_menu'}->append($widgets->{'separator2'} );
			    $widgets->{'separator2'}->show;
			    $forms->{'app1'}{'separator2'} = $widgets->{'separator2'};
			    #
			    # Construct a GtkPixmapMenuItem 'properties1'
			    $widgets->{'properties1'} = Gnome::Stock->menu_item('Menu_Properties', _('Properties'));
			    $forms->{'app1'}{'edit1_menu'}->append($widgets->{'properties1'} );
			    $widgets->{'properties1'}->show;
			    $forms->{'app1'}{'properties1'} = $widgets->{'properties1'};
		    #
		    # Construct a GtkMenuItem 'view1'
		    $widgets->{'view1'} = new Gtk::MenuItem(_('_View'));
		    $forms->{'app1'}{'menubar1'}->append($widgets->{'view1'} );
		    $widgets->{'view1'}->show;
		    $forms->{'app1'}{'view1'} = $widgets->{'view1'};
		    $forms->{'app1'}{'view1-key'} = $forms->{'app1'}{'view1'}->child->parse_uline(_('_View') );
		    $forms->{'app1'}{'view1'}->add_accelerator('activate_item', $forms->{'app1'}{'accelgroup'}, $forms->{'app1'}{'view1-key'}, 'mod1_mask', ['visible', 'locked'] );
			#
			# Construct a GtkMenu 'view1_menu'
			$widgets->{'view1_menu'} = new Gtk::Menu;
			$forms->{'app1'}{'view1'}->set_submenu($widgets->{'view1_menu'} );
			$forms->{'app1'}{'view1_menu'} = $widgets->{'view1_menu'};
		    #
		    # Construct a GtkMenuItem 'settings1'
		    $widgets->{'settings1'} = new Gtk::MenuItem(_('_Settings'));
		    $forms->{'app1'}{'menubar1'}->append($widgets->{'settings1'} );
		    $widgets->{'settings1'}->show;
		    $forms->{'app1'}{'settings1'} = $widgets->{'settings1'};
		    $forms->{'app1'}{'settings1-key'} = $forms->{'app1'}{'settings1'}->child->parse_uline(_('_Settings') );
		    $forms->{'app1'}{'settings1'}->add_accelerator('activate_item', $forms->{'app1'}{'accelgroup'}, $forms->{'app1'}{'settings1-key'}, 'mod1_mask', ['visible', 'locked'] );
			#
			# Construct a GtkMenu 'settings1_menu'
			$widgets->{'settings1_menu'} = new Gtk::Menu;
			$forms->{'app1'}{'settings1'}->set_submenu($widgets->{'settings1_menu'} );
			$forms->{'app1'}{'settings1_menu'} = $widgets->{'settings1_menu'};
			    #
			    # Construct a GtkPixmapMenuItem 'preferences1'
			    $widgets->{'preferences1'} = Gnome::Stock->menu_item('Menu_Preferences', _('Preferences'));
			    $forms->{'app1'}{'settings1_menu'}->append($widgets->{'preferences1'} );
			    $widgets->{'preferences1'}->show;
			    $forms->{'app1'}{'preferences1'} = $widgets->{'preferences1'};
		    #
		    # Construct a GtkMenuItem 'help1'
		    $widgets->{'help1'} = new Gtk::MenuItem(_('_Help'));
		    $forms->{'app1'}{'menubar1'}->append($widgets->{'help1'} );
		    $widgets->{'help1'}->show;
		    $forms->{'app1'}{'help1'} = $widgets->{'help1'};
		    $forms->{'app1'}{'help1-key'} = $forms->{'app1'}{'help1'}->child->parse_uline(_('_Help') );
		    $forms->{'app1'}{'help1'}->add_accelerator('activate_item', $forms->{'app1'}{'accelgroup'}, $forms->{'app1'}{'help1-key'}, 'mod1_mask', ['visible', 'locked'] );
			#
			# Construct a GtkMenu 'help1_menu'
			$widgets->{'help1_menu'} = new Gtk::Menu;
			$forms->{'app1'}{'help1'}->set_submenu($widgets->{'help1_menu'} );
			$forms->{'app1'}{'help1_menu'} = $widgets->{'help1_menu'};
			    #
			    # Construct a GtkPixmapMenuItem 'about1'
			    $widgets->{'about1'} = Gnome::Stock->menu_item('Menu_About', _('About'));
			    $forms->{'app1'}{'help1_menu'}->append($widgets->{'about1'} );
			    $widgets->{'about1'}->show;
			    $forms->{'app1'}{'about1'} = $widgets->{'about1'};
	    #
	    # Construct a GnomeDockItem 'dockitem2'
	    $widgets->{'dockitem2'} = new Gnome::DockItem('dockitem2', ['exclusive'] );
	    $widgets->{'dockitem2'}->set_shadow_type('out' );
	    $forms->{'app1'}{'dock1'}->add_item($widgets->{'dockitem2'}, 'top', 1, 0, 0, 0 );
	    $widgets->{'dockitem2'}->show;
	    $forms->{'app1'}{'dockitem2'} = $widgets->{'dockitem2'};
	    $forms->{'app1'}{'dockitem2'}->border_width(1 );
		#
		# Construct a GtkToolbar 'toolbar1'
		$widgets->{'toolbar1'} = new Gtk::Toolbar('horizontal', 'both' );
		$widgets->{'toolbar1'}->set_space_size(16 );
		$widgets->{'toolbar1'}->set_space_style('line' );
		$widgets->{'toolbar1'}->set_button_relief('none' );
		$widgets->{'toolbar1'}->set_tooltips(1 );
		$forms->{'app1'}{'dockitem2'}->add($widgets->{'toolbar1'} );
		$widgets->{'toolbar1'}->show;
		$forms->{'app1'}{'toolbar1'} = $widgets->{'toolbar1'};
		$forms->{'app1'}{'toolbar1'}->border_width(1 );
		    #
		    # Construct a GtkButton 'button3'
		    $forms->{'app1'}{'button3-pixmap'} = Gnome::Stock->pixmap_widget($forms->{'app1'}{'app1'}, 'New');
		    $widgets->{'button3'} = $forms->{'app1'}{'toolbar1'}->append_element('button', undef, _('New'), _('New File'), '', $forms->{'app1'}{'button3-pixmap'} );
		    $widgets->{'button3'}->show;
		    $forms->{'app1'}{'button3'} = $widgets->{'button3'};
		    #
		    # Construct a GtkButton 'button4'
		    $forms->{'app1'}{'button4-pixmap'} = Gnome::Stock->pixmap_widget($forms->{'app1'}{'app1'}, 'Open');
		    $widgets->{'button4'} = $forms->{'app1'}{'toolbar1'}->append_element('button', undef, _('Open'), _('Open File'), '', $forms->{'app1'}{'button4-pixmap'} );
		    $widgets->{'button4'}->show;
		    $forms->{'app1'}{'button4'} = $widgets->{'button4'};
		    #
		    # Construct a GtkButton 'button5'
		    $forms->{'app1'}{'button5-pixmap'} = Gnome::Stock->pixmap_widget($forms->{'app1'}{'app1'}, 'Save');
		    $widgets->{'button5'} = $forms->{'app1'}{'toolbar1'}->append_element('button', undef, _('Save'), _('Save File'), '', $forms->{'app1'}{'button5-pixmap'} );
		    $widgets->{'button5'}->show;
		    $forms->{'app1'}{'button5'} = $widgets->{'button5'};
	    #
	    # Construct a GtkScrolledWindow 'scrolledwindow1'
	    $widgets->{'scrolledwindow1'} = new Gtk::ScrolledWindow( undef, undef);
	    $widgets->{'scrolledwindow1'}->set_policy('always', 'always' );
	    $widgets->{'scrolledwindow1'}->border_width(0 );
	    $widgets->{'scrolledwindow1'}->hscrollbar->set_update_policy('continuous' );
	    $widgets->{'scrolledwindow1'}->vscrollbar->set_update_policy('continuous' );
	    $forms->{'app1'}{'app1'}->set_contents($widgets->{'scrolledwindow1'} );
	    $widgets->{'scrolledwindow1'}->show;
	    $forms->{'app1'}{'scrolledwindow1'} = $widgets->{'scrolledwindow1'};
		#
		# Construct a GtkViewport 'viewport1'
		$widgets->{'viewport1'} = new Gtk::Viewport(new Gtk::Adjustment( 0.0, 0.0, 101.0, 0.1, 1.0, 1.0), new Gtk::Adjustment( 0.0, 0.0, 101.0, 0.1, 1.0, 1.0) );
		$widgets->{'viewport1'}->set_shadow_type('in' );
		$forms->{'app1'}{'scrolledwindow1'}->add_with_viewport($widgets->{'viewport1'} );
		$widgets->{'viewport1'}->show;
		$forms->{'app1'}{'viewport1'} = $widgets->{'viewport1'};
		    #
		    # Construct a GtkDrawingArea 'drawingarea1'
		    $widgets->{'drawingarea1'} = new Gtk::DrawingArea;
		    $forms->{'app1'}{'viewport1'}->add($widgets->{'drawingarea1'} );
		    $widgets->{'drawingarea1'}->show;
		    $forms->{'app1'}{'drawingarea1'} = $widgets->{'drawingarea1'};
	#
	# Construct a GnomeAppBar 'appbar1'
	$widgets->{'appbar1'} = new Gnome::AppBar(1, 1, 'user');
	$forms->{'app1'}{'app1'}->set_statusbar($widgets->{'appbar1'} );
	$widgets->{'appbar1'}->show;
	$forms->{'app1'}{'appbar1'} = $widgets->{'appbar1'};
    #
    # Connect all signals now that widgets are constructed
    $forms->{'app1'}{'new_file1'}->signal_connect('activate', "$class\::on_new_file1_activate", '', 'new_file1', "app1-$instance" );
    $forms->{'app1'}{'open1'}->signal_connect('activate', "$class\::on_open1_activate", '', 'open1', "app1-$instance" );
    $forms->{'app1'}{'save1'}->signal_connect('activate', "$class\::on_save1_activate", '', 'save1', "app1-$instance" );
    $forms->{'app1'}{'save_as1'}->signal_connect('activate', "$class\::on_save_as1_activate", '', 'save_as1', "app1-$instance" );
    $forms->{'app1'}{'exit1'}->signal_connect('activate', "$class\::on_exit1_activate", '', 'exit1', "app1-$instance" );
    $forms->{'app1'}{'cut1'}->signal_connect('activate', "$class\::on_cut1_activate", '', 'cut1', "app1-$instance" );
    $forms->{'app1'}{'copy1'}->signal_connect('activate', "$class\::on_copy1_activate", '', 'copy1', "app1-$instance" );
    $forms->{'app1'}{'paste1'}->signal_connect('activate', "$class\::on_paste1_activate", '', 'paste1', "app1-$instance" );
    $forms->{'app1'}{'clear1'}->signal_connect('activate', "$class\::on_clear1_activate", '', 'clear1', "app1-$instance" );
    $forms->{'app1'}{'properties1'}->signal_connect('activate', "$class\::on_properties1_activate", '', 'properties1', "app1-$instance" );
    $forms->{'app1'}{'preferences1'}->signal_connect('activate', "$class\::on_preferences1_activate", '', 'preferences1', "app1-$instance" );
    $forms->{'app1'}{'about1'}->signal_connect('activate', "$class\::on_about1_activate", '', 'about1', "app1-$instance" );


    #
    # Return the constructed UI
    bless $self, $class;
    $self->FORM($forms->{'app1'});
    $self->TOPLEVEL($self->FORM->{'app1'});
    $self->FORM->{'TOPLEVEL'} = ($self->TOPLEVEL);
    $self->FORM->{'OBJECT'} = ($self);
    $self->INSTANCE("app1-$instance");
    $self->CLASS_HIERARCHY($self->FORM->{'__CH'});
    $self->WIDGET_HIERARCHY($self->FORM->{'__WH'});
    $__PACKAGE__::all_forms->{$self->INSTANCE} = $self->FORM;
    
    return $self;
} # End of sub new










1;

__END__

#===============================================================================
#==== Documentation
#===============================================================================
=pod

=head1 NAME

NetDisplay - version 0.01 Tue Sep 24 22:49:12 EDT 2002

No description

=head1 SYNOPSIS

 use NetDisplay;

 To construct the window object and show it call
 
 Gtk->init;
 my $window = app1->new;
 $window->TOPLEVEL->show;
 Gtk->main;
 
 OR use the shorthand for the above calls
 
 app1->app_run;

=head1 DESCRIPTION

Unfortunately, the author has not yet written any documentation :-(

=head1 AUTHOR

Jeff <jgoff@localhost.localdomain>

=cut

#!/usr/bin/perl -w
#
# This is the basis of an application with signal handlers
#
# You can safely edit this file, any changes that you make will be preserved
# and this file will not be overwritten by the next run of Glade::PerlGenerate
#
# Skeleton subs of any missing signal handlers can be copied from
# /home/jgoff/Projects/NetDisplay/src/NetDisplaySIGS.pm
#
#==============================================================================
#=== This is the 'app1' class                              
#==============================================================================
package app1;
require 5.000; use strict 'vars', 'refs', 'subs';
# UI class 'app1' (version 0.01)
# 
# Copyright (c) Date Tue Sep 24 22:49:12 EDT 2002
# Author Jeff <jgoff@localhost.localdomain>
#
# Unspecified copying policy, please contact the author
# Jeff <jgoff@localhost.localdomain>
#
#==============================================================================
# This perl source file was automatically generated by 
# Glade::PerlGenerate version 0.60 - Fri May  3 03:56:25 BST 2002
# Copyright (c) Author Dermot Musgrove <dermot.musgrove@virgin.net>
#
# from Glade file /home/jgoff/Projects/NetDisplay/netdisplay.glade
# Sat Oct  5 16:06:16 EDT 2002
#==============================================================================

BEGIN {
    use src::NetDisplayUI;
    # We need the Gnome bindings as well
    use Gnome;
} # End of sub BEGIN

sub app_run {
    my ($class, %params) = @_;
    $class->load_translations('NetDisplay');
    # You can use the line below to load a test .mo file before it is installed in 
    # the normal place (eg /usr/local/share/locale/en_US/LC_MESSAGES/NetDisplay.mo)
#    $class->load_translations('NetDisplay', 'test', undef, '/home/jgoff/Projects/NetDisplay/ppo/NetDisplay.mo');
    Gnome->init("$PACKAGE", "$VERSION");
    my $window = $class->new;
    $window->TOPLEVEL->show;

    # Put any extra UI initialisation (eg signal_connect) calls here

    # Now let Gtk handle signals
    Gtk->main;

    $window->TOPLEVEL->destroy;

    return $window;

} # End of sub app_run

#===============================================================================
#=== Below are the default signal handlers for 'app1' class
#===============================================================================
sub about_Form {
    my ($class) = @_;
    my $gtkversion = 
        Gtk->major_version.".".
        Gtk->minor_version.".".
        Gtk->micro_version;
    my $name = $0;
    #
    # Create a Gnome::About '$ab'
    my $ab = new Gnome::About(
        $PACKAGE, 
        $VERSION, 
        _("Copyright")." $DATE", 
        $AUTHOR, 
        _('No description')."\n".
        "Gtk ".     _("version").": $gtkversion\n".
        "Gtk-Perl "._("version").": $Gtk::VERSION\n".
        `gnome-config --version`."\n".
        _("run from file").": $name\n \n".
        '# Unspecified copying policy, please contact the author
#', 
        "$Glade::PerlRun::pixmaps_directory/Logo.xpm", 
    );
    $ab->set_title(_("About")." app1" );
    $ab->position('mouse' );
    $ab->set_policy(1, 1, 0 );
    $ab->set_modal(1 );
    $ab->show;
} # End of sub about_Form

sub destroy_Form {
    my ($class, $data, $object, $instance) = @_;
    Gtk->main_quit; 
} # End of sub destroy_Form

sub toplevel_hide    { shift->get_toplevel->hide    }
sub toplevel_close   { shift->get_toplevel->close   }
sub toplevel_destroy { shift->get_toplevel->destroy }

#==============================================================================
#=== Below are the signal handlers for 'app1' class 
#==============================================================================
sub on_about1_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_about1_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_about1_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_about1_activate

sub on_clear1_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_clear1_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_clear1_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_clear1_activate

sub on_copy1_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_copy1_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_copy1_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_copy1_activate

sub on_cut1_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_cut1_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_cut1_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_cut1_activate

sub on_exit1_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_exit1_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_exit1_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_exit1_activate

sub on_new_file1_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_new_file1_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_new_file1_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_new_file1_activate

sub on_open1_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_open1_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_open1_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_open1_activate

sub on_paste1_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_paste1_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_paste1_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_paste1_activate

sub on_preferences1_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_preferences1_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_preferences1_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_preferences1_activate

sub on_properties1_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_properties1_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_properties1_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_properties1_activate

sub on_save1_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_save1_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_save1_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_save1_activate

sub on_save_as1_activate {
    my ($class, $data, $object, $instance, $event) = @_;
    my $me = __PACKAGE__."->on_save_as1_activate";
    # Get ref to hash of all widgets on our form
    my $form = $__PACKAGE__::all_forms->{$instance};

    # REPLACE the line below with the actions to be taken when __PACKAGE__."->on_save_as1_activate." is called
    __PACKAGE__->show_skeleton_message($me, \@_, __PACKAGE__, "$Glade::PerlRun::pixmaps_directory/Logo.xpm");

} # End of sub on_save_as1_activate










1;

__END__

#===============================================================================
#==== Documentation
#===============================================================================
=pod

=head1 NAME

NetDisplay - version 0.01 Tue Sep 24 22:49:12 EDT 2002

No description

=head1 SYNOPSIS

 use NetDisplay;

 To construct the window object and show it call
 
 Gtk->init;
 my $window = app1->new;
 $window->TOPLEVEL->show;
 Gtk->main;
 
 OR use the shorthand for the above calls
 
 app1->app_run;

=head1 DESCRIPTION

Unfortunately, the author has not yet written any documentation :-(

=head1 AUTHOR

Jeff <jgoff@localhost.localdomain>

=cut
